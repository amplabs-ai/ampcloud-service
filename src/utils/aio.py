import glob
import logging
import pandas as pd
import os

# Function to convert a list to a string
def listToString(s):
    # initialize an empty string
    str1 = ""

    # traverse in the string
    for ele in s:
        str1 += ele

        # return string
    return str1

# identify the sign of the current for a MACCOR file
def signedCurrent(x, y):
    if x == "D":
        return -y
    else:
        return y
# remove metadata entries from MACCOR files
def prepare_maccor_file(cellpath):

    a_file = open(cellpath, "r", encoding='utf8', errors='ignore')
    lines = a_file.readlines()
    a_file.close()

    #a_file = open(cellpath, "rb").read().decode('ISO-8859-1')
    #print(a_file)
    #lines = a_file.readlines()
    #lines = a_file
    #a_file.close()

    cellpath_df = cellpath + "_df"

    new_file = open(cellpath_df, "w")
    for line in lines:
        forget_line = line.startswith("Today") or line.startswith(
            "Filename") or line.startswith("Procedure") or line.startswith(
                "Comment")

        if not forget_line:
            new_file.write(line)

    new_file.close()

    return cellpath_df


# import data from Arbin-generated Excel files
def read_arbin(cell_id, file_path):

    # the importer can read Excel worksheets with the Channel number from Arbin files.
    # it assumes column names generated by the Arbin:
    # Cycle_Index -> cycle_index
    # Test_Time(s) -> test_time
    # Current(A) -> i
    # Voltage(V) -> v
    # Date_Time -> date_time

    logging.info('adding files')

    listOfFiles = glob.glob(file_path + '*.xls*')

    for i in range(len(listOfFiles)):
        listOfFiles[i] = listOfFiles[i].replace(file_path[:-1], '')

    logging.info('list of files to add: ' + str(listOfFiles))

    df_file = pd.DataFrame(listOfFiles, columns=['filename'])

    df_file.sort_values(by=['filename'], inplace=True)

    if df_file.empty:
        return

    df_file['cell_id'] = cell_id

    df_tmerge = pd.DataFrame()

    # Loop through all the Excel test files
    for ind in df_file.index:

        filename = df_file['filename'][ind]
        cellpath = file_path + filename
        timeseries = ""

        logging.info('processing file: ' + filename)

        if os.path.exists(cellpath):
            if '~$' in cellpath:
                continue
            df_cell = pd.read_excel(cellpath, None)
            # Find the time series sheet in the excel file
            for k in df_cell.keys():
                if "hannel" in k:
                    logging.info("file: " + filename + " sheet:" + str(k))
                    timeseries = k

                    df_time_series_file = df_cell[timeseries]

                    df_time_series = pd.DataFrame()

                    df_time_series['cycle_index_file'] = df_time_series_file[
                        'Cycle_Index']
                    df_time_series['test_time'] = df_time_series_file[
                        'Test_Time(s)']
                    df_time_series['i'] = df_time_series_file['Current(A)']
                    df_time_series['v'] = df_time_series_file['Voltage(V)']
                    df_time_series['date_time'] = df_time_series_file[
                        'Date_Time']
                    df_time_series['filename'] = filename

                    #if not df_time_series_file['Temperature (C)_1'].empty:
                    #    df_time_series['temp_2'] = df_time_series_file['Temperature (C)_1']

                    df_time_series['ah_c'] = 0
                    df_time_series['e_c'] = 0
                    df_time_series['ah_d'] = 0
                    df_time_series['e_d'] = 0
                    df_time_series['cell_id'] = cell_id
                    df_time_series['cycle_index'] = 0
                    df_time_series['cycle_time'] = 0

                    cycles_index = df_time_series[["cycle_index_file"
                                                   ]].to_numpy()
                    past_cycle = 0
                    start = 0

                    for x in cycles_index:
                        if start == 0:
                            past_cycle = x[0]
                            start += 1
                        else:
                            if x[0] < past_cycle:
                                x[0] = past_cycle
                            past_cycle = x[0]

                    df_tmp = pd.DataFrame(data=cycles_index[:, [0]],
                                          columns=["cycle_index_file"])
                    df_time_series['cycle_index_file'] = df_tmp[
                        'cycle_index_file']

                    if df_tmerge.empty:
                        df_tmerge = df_time_series
                    else:
                        df_tmerge = df_tmerge.append(df_time_series,
                                                     ignore_index=True)

    return df_tmerge


# import data from MACCOR-generated  files
def read_maccor(cell_id, file_path):

    # the importer can read Excel worksheets with the Channel number from Arbin files.
    # it assumes column names generated by the MACCOR:
    # Cycle_Index -> cycle_index
    # Test_Time(s) -> test_time
    # Current(A) -> i
    # Voltage(V) -> v
    # Date_Time -> date_time

    logging.info('adding files')

    listOfFiles = glob.glob(file_path + '*.txt')

    for i in range(len(listOfFiles)):
        listOfFiles[i] = listOfFiles[i].replace(file_path[:-1], '')

    logging.info('list of files to add: ' + str(listOfFiles))

    df_file = pd.DataFrame(listOfFiles, columns=['filename'])

    df_file.sort_values(by=['filename'], inplace=True)

    if df_file.empty:
        return

    df_file['cell_id'] = cell_id

    df_tmerge = pd.DataFrame()

    # Loop through all the Excel test files
    for ind in df_file.index:

        filename = df_file['filename'][ind]
        cellpath = file_path + filename

        logging.info('processing file: ' + filename)

        if os.path.exists(cellpath):

            cellpath_df = prepare_maccor_file(cellpath)

            df_cell = pd.read_csv(cellpath_df, sep='\t')
            # Find the time series sheet in the excel file

            df_time_series_file = df_cell

            df_time_series = pd.DataFrame()

            df_time_series['cycle_index_file'] = df_time_series_file[
                'Cycle'].apply(pd.to_numeric)
            df_time_series['test_time'] = df_time_series_file[
                'Test Time (sec)'].str.replace(',', '').apply(pd.to_numeric)

            df_time_series['i'] = df_time_series_file['Current'].apply(
                pd.to_numeric)
            df_time_series['MD'] = df_time_series_file['MD']

            df_time_series['i'] = df_time_series.apply(
                lambda x: signedCurrent(x.MD, x.i), axis=1)

            df_time_series.drop('MD', axis=1, inplace=True)

            df_time_series['v'] = df_time_series_file['Voltage'].apply(
                pd.to_numeric)
            df_time_series['date_time'] = pd.to_datetime(
                df_time_series_file['DPT Time'], format='%m/%d/%Y %I:%M:%S %p')
            df_time_series['filename'] = filename

            df_time_series['ah_c'] = 0
            df_time_series['e_c'] = 0
            df_time_series['ah_d'] = 0
            df_time_series['e_d'] = 0
            df_time_series['cell_id'] = cell_id
            df_time_series['cycle_index'] = 0
            df_time_series['cycle_time'] = 0

            if df_tmerge.empty:
                df_tmerge = df_time_series
            else:
                df_tmerge = df_tmerge.append(df_time_series, ignore_index=True)

    return df_tmerge


# Read the abuse excel file from ORNL
def read_ornlabuse(cell_id, file_path):

    excels = glob.glob(file_path + '*.xls*')

    df_tmerge = pd.DataFrame()
    print("EXCELS", excels)
    for excel in excels:
        if '~$' in excel:
            continue
        df_time_series_file = pd.read_excel(
            excel, sheet_name='data')  # dictionary of sheets

        df_time_series_a = pd.DataFrame()
        df_time_series_a['test_time'] = df_time_series_file['Running Time']
        df_time_series_a['axial_d'] = df_time_series_file['Axial Displacement']
        df_time_series_a['v'] = df_time_series_file['Analog 1']
        df_time_series_a['axial_f'] = df_time_series_file['Axial Force']
        df_time_series_a['temp_1'] = 0
        df_time_series_a['temp_2'] = 0
        df_time_series_a['temp_3'] = 0
        df_time_series_a['temp_4'] = 0
        df_time_series_a['temp_5'] = 0
        df_time_series_a['temp_6'] = 0
        df_time_series_a['cell_id'] = cell_id

        df_time_series_b = pd.DataFrame()
        df_time_series_b['test_time'] = df_time_series_file['Running Time 1']
        df_time_series_b['axial_d'] = 0
        df_time_series_b['v'] = 0
        df_time_series_b['axial_f'] = 0
        df_time_series_b['temp_1'] = df_time_series_file['TC 01']
        df_time_series_b['temp_2'] = df_time_series_file['TC 02']
        df_time_series_b['temp_3'] = df_time_series_file['TC 03']
        df_time_series_b['temp_4'] = df_time_series_file['TC 04']
        df_time_series_b['temp_5'] = df_time_series_file['TC 05']
        df_time_series_b['temp_6'] = df_time_series_file['TC 06']
        df_time_series_b['cell_id'] = cell_id

        if df_tmerge.empty:
            df_tmerge = df_time_series_a
            df_tmerge = df_tmerge.append(df_time_series_b, ignore_index=True)
        else:
            df_tmerge = df_tmerge.append(df_time_series_a, ignore_index=True)
            df_tmerge = df_tmerge.append(df_time_series_b, ignore_index=True)

    return df_tmerge


# read the abuse excel files from SNL
def read_snlabuse(cell_id, file_path):

    excels = glob.glob(file_path + '*.xls*')

    df_tmerge = pd.DataFrame()

    for excel in excels:
        if '~$' in excel:
            continue
        df_time_series_file = pd.read_excel(
            excel, sheet_name='data')  # dictionary of sheets

        df_time_series = pd.DataFrame()
        df_time_series['test_time'] = df_time_series_file['Running Time']
        df_time_series['axial_d'] = df_time_series_file['Axial Displacement']
        df_time_series['axial_f'] = df_time_series_file['Axial Force']
        df_time_series['v'] = df_time_series_file['Analog 1']
        df_time_series['temp_1'] = df_time_series_file['TC 01']
        df_time_series['temp_2'] = df_time_series_file['TC 02']
        df_time_series['temp_3'] = df_time_series_file['TC 03']
        df_time_series['temp_4'] = df_time_series_file['TC 04']
        df_time_series['temp_5'] = df_time_series_file['TC 05']
        df_time_series['temp_6'] = df_time_series_file['TC 06']
        df_time_series['cell_id'] = cell_id

        if df_tmerge.empty:
            df_tmerge = df_time_series
        else:
            df_tmerge = df_tmerge.append(df_time_series, ignore_index=True)

    return df_tmerge

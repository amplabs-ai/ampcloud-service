import gzip
import datetime
import pandas as pd
from app.archive_constants import FORMAT


def read_generic(file, mapping='test_time,cycle,current,voltage'):
    df_tmerge = pd.DataFrame()
    with gzip.open(file, 'rb') as decompressed_file:
        df_time_series_file = pd.read_csv(decompressed_file, sep=',')

    df_ts = pd.DataFrame()
    column_list = mapping.split(",")

    for col in column_list:
        if col == 'date_time':
            df_ts['date_time'] = pd.to_datetime(
                df_time_series_file[col], format='%Y-%m-%d %H:%M:%S.%f')
        elif col != "skip":
            df_ts[col] = df_time_series_file[col].apply(
                pd.to_numeric)

    # need at the least one of date_time or test_time
    # TODO: how do we fail the import?

    if "date_time" not in df_ts.columns and "test_time" in df_ts.columns:
        df_ts['date_time'] = pd.Timestamp(
            datetime.datetime.now()) + pd.to_timedelta(df_ts['test_time'], unit='s')

    if "date_time" in df_ts.columns and "test_time" not in df_ts.columns:
        df_ts['test_time'] = df_ts['date_time'] - \
            df_ts['date_time'].iloc[0]
        df_ts['test_time'] = df_ts['test_time'].dt.total_seconds()

    df_ts['ah_c'] = 0
    df_ts['e_c'] = 0
    df_ts['ah_d'] = 0
    df_ts['e_d'] = 0
    df_ts['cycle_index_file'] = df_ts[
        'cycle'].apply(pd.to_numeric)
    df_ts['cycle_time'] = 0
    df_ts['cycle_index'] = 0
    df_ts['filename'] = file.filename

    if df_tmerge.empty:
        df_tmerge = df_ts[df_ts['test_time'] > 0]
    else:
        df_tmerge = df_tmerge.append(
            df_ts[df_ts['test_time'] > 0], ignore_index=True)

    df_tmerge.rename(columns={'current': 'i', 'voltage': 'v'}, inplace=True)
    df_tmerge.drop(['cycle'], axis=1, inplace=True)
    return df_tmerge


# import data from Arbin-generated Excel files
def read_arbin(file, file_type='xlsx'):

    # the importer can read Excel worksheets with the Channel number from Arbin files.
    # it assumes column names generated by the Arbin:
    # Cycle_Index -> cycle_index
    # Test_Time(s) -> test_time
    # Current(A) -> i
    # Voltage(V) -> v
    # Date_Time -> date_time

    df_tmerge = pd.DataFrame()

    timeseries = ""

    df_cell = []
    if file_type == FORMAT.XLSX.value:
        with gzip.open(file, 'rb') as decompressed_file:
            df_cell = pd.read_excel(decompressed_file, None)
    if file_type == FORMAT.FEATHER.value:
        with gzip.open(file, 'rb') as decompressed_file:
            df_cell = pd.read_feather(decompressed_file, None)

    for k in df_cell.keys():
        if "hannel" in k:
            # logging.info("file: " + filename + " sheet:" + str(k))
            timeseries = k

            df_time_series_file = df_cell[timeseries]

            df_ts = pd.DataFrame()

            df_ts['cycle_index_file'] = df_time_series_file[
                'Cycle_Index']
            df_ts['test_time'] = df_time_series_file[
                'Test_Time(s)']
            df_ts['i'] = df_time_series_file['Current(A)']
            df_ts['v'] = df_time_series_file['Voltage(V)']
            df_ts['date_time'] = df_time_series_file['Date_Time']
            df_ts['filename'] = file.filename
            df_ts['ah_c'] = 0
            df_ts['e_c'] = 0
            df_ts['ah_d'] = 0
            df_ts['e_d'] = 0
            df_ts['cycle_index'] = 0
            df_ts['cycle_time'] = 0

            cycles_index = df_ts[["cycle_index_file"]].to_numpy()
            past_cycle = 0
            start = 0

            for x in cycles_index:
                if start == 0:
                    past_cycle = x[0]
                    start += 1
                else:
                    if x[0] < past_cycle:
                        x[0] = past_cycle
                    past_cycle = x[0]

            df_tmp = pd.DataFrame(data=cycles_index[:, [0]],
                                  columns=["cycle_index_file"])
            df_ts['cycle_index_file'] = df_tmp['cycle_index_file']

            if df_tmerge.empty:
                df_tmerge = df_ts
            else:
                df_tmerge = df_tmerge.append(df_ts,
                                             ignore_index=True)

    return df_tmerge


# import data from MACCOR-generated  files
def read_maccor(file):

    # the importer can read Excel worksheets with the Channel number from Arbin files.
    # it assumes column names generated by the MACCOR:
    # Cycle_Index -> cycle_index
    # Test_Time(s) -> test_time
    # Current(A) -> i
    # Voltage(V) -> v
    # Date_Time -> date_time

    df_tmerge = pd.DataFrame()

    file_df = prepare_maccor_file(file)
    df_cell = pd.read_csv(file_df, sep='\t')

    df_time_series_file = df_cell

    df_time_series = pd.DataFrame()

    df_time_series['cycle_index_file'] = df_time_series_file[
        'Cycle'].apply(pd.to_numeric)
    df_time_series['test_time'] = df_time_series_file[
        'Test Time (sec)'].str.replace(',',
                                       '').apply(pd.to_numeric)

    df_time_series['i'] = df_time_series_file['Current'].apply(
        pd.to_numeric)
    df_time_series['MD'] = df_time_series_file['MD']

    df_time_series['i'] = df_time_series.apply(
        lambda x: signedCurrent(x.MD, x.i), axis=1)

    df_time_series.drop('MD', axis=1, inplace=True)

    df_time_series['v'] = df_time_series_file['Voltage'].apply(
        pd.to_numeric)
    df_time_series['date_time'] = pd.to_datetime(
        df_time_series_file['DPT Time'],
        format='%m/%d/%Y %I:%M:%S %p')
    df_time_series['filename'] = file.filename

    df_time_series['ah_c'] = 0
    df_time_series['e_c'] = 0
    df_time_series['ah_d'] = 0
    df_time_series['e_d'] = 0
    df_time_series['cycle_index'] = 0
    df_time_series['cycle_time'] = 0

    if df_tmerge.empty:
        df_tmerge = df_time_series
    else:
        df_tmerge = df_tmerge.append(df_time_series,
                                     ignore_index=True)
    return df_tmerge


def prepare_maccor_file(file):
    with gzip.open(file, 'rb') as decompressed_file:
        lines = decompressed_file.readlines()
    file.close()

    cellpath_df = "test" + "_df"

    new_file = open(cellpath_df, "wb")
    for line in lines:
        forget_line = line.startswith(b"Today") or line.startswith(
            b"Filename") or line.startswith(b"Procedure") or line.startswith(
                b"Comment")
        if not forget_line:
            new_file.write(line)
    new_file.close()
    return cellpath_df


# identify the sign of the current for a MACCOR file
def signedCurrent(x, y):
    if x == "D":
        return -y
    else:
        return y
